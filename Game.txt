from collections import deque
from queue import PriorityQueue

def open_File(filename):
    matrix = []
    with open(filename, 'r') as f:
        for line in f:
            row = line.strip().split()
            matrix.append(row)
    return matrix

matrix = open_File("file.txt")
matrix

BFS:
from collections import deque

def BFS(matrix):
    def Valid(x, y):
        return 0 <= x < len(matrix) and 0 <= y < len(matrix[0]) and matrix[x][y] != '1' and not visited[x][y]

    start = (0, 0)
    queue = deque([(start, [start])])
    visited = [[False for _ in range(len(matrix[0]))] for _ in range(len(matrix))]

    while queue:
        (x, y), path = queue.popleft()
        if matrix[x][y] == 'G':  # Check if the current cell is the goal
            return path

        visited[x][y] = True
        for direction_x, direction_y in [(1, 0), (0, 1), (-1, 0), (0, -1)]:
            next_x, next_y = x + direction_x, y + direction_y
            if Valid(next_x, next_y):
                new_path = path + [(next_x, next_y)]
                queue.append(((next_x, next_y), new_path))
                visited[next_x][next_y] = True

    return -1

Path = BFS(matrix)
if Path == -1:
  print("No Path Exists")
else:
  print("BFS Path:", Path)


DFS:
def DFS(matrix):
    def Valid(x, y):
        return 0 <= x < len(matrix) and 0 <= y < len(matrix[0]) and matrix[x][y] != '1' and not visited[x][y]

    start = (0, 0)
    stack = [(start, [start])]
    visited = [[False for _ in range(len(matrix[0]))] for _ in range(len(matrix))]

    while stack:
        (x, y), path = stack.pop()
        if matrix[x][y] == 'G':  # Check if the current cell is the goal
            return path

        visited[x][y] = True
        for direction_x, direction_y in [(1, 0), (0, 1), (-1, 0), (0, -1)]:
            next_x, next_y = x + direction_x, y + direction_y
            if Valid(next_x, next_y):
                new_path = path + [(next_x, next_y)]
                stack.append(((next_x, next_y), new_path))
                visited[next_x][next_y] = True

    return -1
Path = DFS(matrix)
if Path == -1:
  print("No Path Exists")
else:
  print("DFS Path:", Path)


Uniform Cost:
def Uniform_Cost(graph, start, target):
    visited = set()
    queue = PriorityQueue()
    queue.put((0, start))
    parent = {}
    node_cost = {start: 0}

    while not queue.empty():
        current_cost, node = queue.get()
        if node not in visited:
            visited.add(node)

            if node == target:
                break

            for neighbor, weight in graph.get(node, []):
                new_cost = node_cost[node] + weight
                if neighbor not in node_cost or new_cost < node_cost[neighbor]:
                    node_cost[neighbor] = new_cost
                    priority = new_cost
                    queue.put((priority, neighbor))
                    parent[neighbor] = node

    if target not in parent:
        return None, float('inf')

    path = []
    curr_node = target
    while curr_node != start:
        path.append(curr_node)
        curr_node = parent[curr_node]
    path.append(start)
    path.reverse()

    return path, node_cost[target]

graph = {
    'S': [('A', 5), ('B', 2)],
    'A': [('B', 15), ('G', 8)],
    'B': [('S', 1)],
    'G':[]
}

start_node = 'S'
target_node = 'G'
path, cost = Uniform_Cost(graph, start_node, target_node)

if path:
    print("Shortest Path:", path)
    print("Total cost:", cost)
else:
    print("No path found.")



A*:
matrix = open_File("file1.txt")
matrix

def heuristic_func(node, target):
    return abs(node[0] - target[0]) + abs(node[1] - target[1])

def neighbors(node, matrix):
    directions = [(1, 0), (0, 1), (-1, 0), (0, -1)]
    neighbors = []
    for dx, dy in directions:
        x, y = node[0] + dx, node[1] + dy
        while 0 <= x < len(matrix) and 0 <= y < len(matrix[0]) and matrix[x][y] != '1':
            if matrix[x][y] != '+':
                neighbors.append((x, y))
            x += dx
            y += dy
    return neighbors

def a_star(matrix, start, target):
    open_list = [(0, start)]
    parent = {}
    cost_so_far = {start: 0}

    while open_list:
        _, current = min(open_list)
        open_list.remove((_, current))

        if current == target:
            break

        for next_node in neighbors(current, matrix):
            new_cost = cost_so_far[current] + (matrix[next_node[0]][next_node[1]] == '+')
            if next_node not in cost_so_far or new_cost < cost_so_far[next_node]:
                cost_so_far[next_node] = new_cost
                priority = new_cost + heuristic_func(next_node, target)
                open_list.append((priority, next_node))
                parent[next_node] = current

    path = []
    curr_node = target
    while curr_node in parent:
        path.append(curr_node)
        current = parent[curr_node]
    path.append(start)
    path.reverse()

    return path
start = (0, 2)
target = (6, 0)

path = a_star(matrix, start, target)

if path:
    print("Path found:", path)
else:
    print("No path found.")


Alpha-Beta Pruning:

# Python3 program to demonstrate 
# working of Alpha-Beta Pruning 

# Initial values of Alpha and Beta 
MAX, MIN = 1000, -1000

# Returns optimal value for current player 
#(Initially called for root and maximizer) 
def minimax(depth, nodeIndex, maximizingPlayer, 
			values, alpha, beta): 

	# Terminating condition. i.e 
	# leaf node is reached 
	if depth == 3: 
		return values[nodeIndex] 

	if maximizingPlayer: 
	
		best = MIN

		# Recur for left and right children 
		for i in range(0, 2): 
			
			val = minimax(depth + 1, nodeIndex * 2 + i, 
						False, values, alpha, beta) 
			best = max(best, val) 
			alpha = max(alpha, best) 

			# Alpha Beta Pruning 
			if beta <= alpha: 
				break
		
		return best 
	
	else:
		best = MAX

		# Recur for left and 
		# right children 
		for i in range(0, 2): 
		
			val = minimax(depth + 1, nodeIndex * 2 + i, 
							True, values, alpha, beta) 
			best = min(best, val) 
			beta = min(beta, best) 

			# Alpha Beta Pruning 
			if beta <= alpha: 
				break
		
		return best 
	
# Driver Code 
if __name__ == "__main__": 

	values = [3, 5, 6, 9, 1, 2, 0, -1] 
	print("The optimal value is :", minimax(0, 0, True, values, MIN, MAX)) 
	
# This code is contributed by Rituraj Jain

